https://www.youtube.com/watch?v=I0poT4UxFxE&list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE&index=2
-Authentication
    -Knowledge Based Authentication
        -UserID
        -Password
        -A security question
        -This authentication is based on knowledge
    -Possession Based Authentication
        -Sending a text message to your phone
    -Multifactor
        -A mix of the two

-Authorization
    -Can this user do what they are trying to do?
    -You need authentication first

-Principal
    -The person you have identified through the process of authentication
    -The currently logged in user

-Granted Authority
    -Like a permissions from FCS

-Filters
    -Will filter a request to an endpoint to check for authentication
    -servlet - provides a response to a particular request
    - The classpath security filter adds mandatory authentication for all urls

-Going to application.properties allows you to change the username and password as seen here
    https://www.youtube.com/watch?v=PhG5p_yv0zs&list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE&index=3
    -at 9:02

https://www.youtube.com/watch?v=iyXne7dIn7U&list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE&index=4 - Video 4
    -The authentication manages app authentication
    -The AuthenticationManagerBuilder class can be extended and the configure method overridden to allow for our own auth
    configuration
    -Password Encoding - will hash your password for you

https://www.youtube.com/watch?v=payxWrmF_0k&list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE&index=5 - Video 5
    -

https://www.youtube.com/watch?v=caCJAJC41Rk&list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE&index=6 - Video 6
    -Come back later

https://www.youtube.com/watch?v=LKvrFltAgCQ&list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE&index=7
    - Spring Boot -> Spring Security -> JPA -> MySQL for authentication
    - Check if user is in DB and if the Credentials are correct
    - Using MySql Create a DB called springsecurity and a table called user.

https://www.youtube.com/watch?v=TNt3GHuayXs&list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE&index=8
    - The columns will be username, password, active (if the user is active), and roles (column separated list of roles)
    - https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/?fbclid=IwAR2esmMcw8OmpMNXzqfKXX2zBTjhOx2XwOV2gbTPKpqnvtt7T_ZDD9p9KCQ#user-schema
        - Our schema
    - https://dev.mysql.com/doc/mysql-shell/8.0/en/mysql-shell-commands.html
        -To start DB
        -https://stackoverflow.com/questions/17426052/error-2003-hy000-cant-connect-to-mysql-server-on-localhost-10061

https://www.youtube.com/watch?v=soGRyl9ztjI&list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE&index=10
    - JWT Tutorial
        - JWTs tells the server WHO you are
        - Tokens help web apps remember sessions
        - Session Tokens
            - When you authenticate, the server creates a session ID and keeps a hold of it
            - Session ID is saved in a cookie, commonly
            - Disadvantages of session ID:
                - This approach assumes there's only one monolithic server (not a load balancer)
                - Multiple servers makes it so there are multiple places that would have not in sync session IDs
                - One Solution is to save session IDs in a shared Redis Cache
                - Another solution is to have the load balancer remember the server that the session ID is stored
        - With JWT
            - When the client authenticates, the user info is returned as a token
            - The client sends the token with the request
            - When a user authenticates, the server signs the JWT.

https://www.youtube.com/watch?v=_XbXkVdoG_0&list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE&index=11
    - What does a JWT Look Like?
        - The Header, the payload, the signature
        - The point of JWT is to send something from the Server to the client so that the client can send it back upon request
        - It's the server saying "I've authenticated you, so send me this token back every time you make a request so I know who you are"
        - The header and the signature are what is unique to the user, it's what handles the who of the user (starting at 5:15 in the video)
        - The Base64 Encoding of the Header and payload is done out of convenience
        - When somebody authenticates, the server signs/creates the signature in a way that only the server can calculate
        - The "your-256-bit-secret" part of the signature helps the encoding/decoding, known as a cryptographic hash
        - JWT is specific to authorization
        - The JWT is either stored on the local storage or in a cookie
        - JWT is passed in the HTTP Header.
            - Because the Header is a key/value pair, JWT has a standard for being passed. It looks like:
                Authorization: Bearer ~JWT Value~

        The Steps for JWT Authentication:
            1) Send the userId/Password to the server
            2) The server Authenticates
            3) The server generated the JWT
            4) Send the JWT to the client
            5) The client will save it in a cookie or local storage
            6) To pass the info back to the server, put the JWT in a header called authorization: Bearer ~jwt~
        - JWT Transmission has to happen in a HTTPS Connection
        - OAuth authenticates/authorizes users
        - JWTs can expire by payloads
        - JWTs can also be blacklisted

Here is what resolved the authentication issue: https://stackoverflow.com/questions/54254901/why-spring-is-not-recognizing-my-websecurityconfigureradapter-with-basicauth
And here is my stack overflow question: https://stackoverflow.com/questions/60581245/springboot-userdetailsservice-loaduserbyusername-method-never-called-with-custom

